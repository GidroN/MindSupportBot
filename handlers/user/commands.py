from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ForceReply

from constants.point_counter import Points
from database.models import User, Post
from constants.button_text import ButtonText as BT
from keyboards.inline import user_how_to_earn_points_kb
from keyboards.reply import main_menu_user_kb, menu_button_kb, profile_user_kb, profile_button_kb
from keyboards.builders import categories
from misc.states import SearchPostForm, AddPostForm
from misc.utils import send_user_change_post_info

router = Router(name="user_commands")


@router.message(F.text == BT.MAIN_MENU)
@router.message(Command("menu"))
async def main_menu(message: Message, state: FSMContext):
    await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_user_kb)
    await state.clear()


@router.message(CommandStart())
async def start(message: Message):
    user = message.from_user

    tg_id = user.id
    full_name = user.full_name
    username = user.username

    user = await User.get_or_none(tg_id=tg_id)
    if user is None:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{full_name}</b>!", reply_markup=main_menu_user_kb)
        await User.create(tg_id=tg_id, name=full_name, username=username)
    else:
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º <b>{full_name}</b>!", reply_markup=main_menu_user_kb)


@router.message(Command("search_posts"))
@router.message(F.text == BT.SEARCH_POST)
async def wanna_help(message: Message, state: FSMContext):
    await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ–∫–∞–∑–∞–Ω–∏—è –ø–æ–º–æ—â–∏", reply_markup=menu_button_kb)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=await categories())
    await state.set_state(SearchPostForm.category)


@router.message(Command("add_post"))
@router.message(F.text == BT.ADD_POST)
async def need_help(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    user = await User.get(tg_id=tg_id)

    if user.points < abs(Points.ADD_POST):
        await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞.\n "
                             f"–£ –≤–∞—Å <b>{user.points}</b>, –∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <b>{Points.ADD_POST}</b>.\n "
                             f"–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - /stats")
        return

    await state.set_state(AddPostForm.category)
    await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=menu_button_kb)
    await message.answer("–ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
                         reply_markup=await categories(show_all=False))


@router.message(Command("profile"))
@router.message(F.text == BT.PROFILE)
async def profile(message: Message):
    await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=profile_user_kb)


@router.message(Command("stats"))
@router.message(F.text == BT.STATISTICS)
async def user_stats(message: Message):
    tg_id = message.from_user.id
    user = await User.get(tg_id=tg_id)
    published_posts = await Post.filter(user=user).count()
    await message.answer(f"üßë <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
                         f"üé° –ë–∞–ª–ª—ã: <b>{user.points}</b>\n"
                         f"üìö –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: <b>{published_posts}</b>\n", reply_markup=user_how_to_earn_points_kb)


@router.message(Command("my_posts"))
@router.message(F.text == BT.MODERATE_POST)
async def moderate_posts(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    user = await User.get(tg_id=tg_id)
    posts = await Post.filter(user=user).prefetch_related("user", "category")
    post_list_ids = await Post.filter(user=user).values_list("id", flat=True)

    if not posts:
        await message.answer("–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞–ø–∏—à–∏—Ç–µ /add_post")
        return

    await state.update_data(post_list_ids=post_list_ids)
    await message.answer(f"–£ –≤–∞—Å {len(posts)} —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤", reply_markup=profile_button_kb)
    await send_user_change_post_info(posts, message)


@router.message(Command("help"))
async def help_command(message: Message):
    await message.answer("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n"
                         "<b>/menu</b> - –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                         "<b>/profile</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è\n"
                         "<b>/my_posts</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤\n"
                         "<b>/search_posts</b> - –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤\n"
                         "<b>/stats</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
                         "<b>/help - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.</b>")


@router.message()
async def handle_all_messages(message: Message):
    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–Ω–µ —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
